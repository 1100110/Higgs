TODO: all libs
      - cleaner API designs
      - reduce c-isms? If users can access our tools they can write c-in-js to their heart's content
        whether for perf or personal preference. We should strive for cleaner/higher level apis that
        are convienent for common use.
      - the "wrap a single c library" model does not seem to always map well to how users will want
        to write code. C can get away with having filesystem related functions spread out across several
        libs due to it's compilation model -  we have to execute and load into memory expensive high level
        code or every module require()'d, so some focus is probably desirable. It does work somewhat
        for really common functionality and 3rd party c libs that are pretty focused, but I want to take a
        good look at different ways to organize "core" common functions for Higgs.
      - Node api compatibility? Would probably be nice, but meh.
        Perhaps Higgs should strive for it's own ecosystem. Should perhaps try to conform to CommonJS where
        applicable. Compatibility is nice, but so is diversity to avoid stagnation.
      - perf also needs to be a consideration; all apis/libs should be designed so that it's easy to do
        common tasks in a performant way. Try to achieve best balance possible.

TODO: test lib
      - more assert/testing functions
      X basic assert functions; exit abnormally on failure

TODO: improve FFI
      - better errors in cdef (pretty, even? arrows pointing to failures? line/col?)
      - add more wrapping capability
      - performance improvements (more caching/sharing, etc internally)
      - leverage maps() for looking up types
      - c-types? While working on the FFI, it may be possible to change it's internal api
        to something like c-types, and allow users to use it directly if they wish rather than
        cdef();
      - add caching for bindings created by cdef to avoid reparsing, eval(), etc each time?

TODO: SDL bindings
      - move to binding for SDL2? Not as much support currently, but more future proof

TODO: stdlib
      - improve stdlib

TODO: organize
      - merge in the ridic number of feature branches you got going on brah

TODO: docs
      - more documentation needed all around

TODO: dir lib
      - add functionality / settle api
      - add more predicate functions - isFile etc (construct these at include time with eval? - saves lookup time)

TODO: higgs-mode
      - higgs (minor?) mode for emacs, prototype complete
      - get prototype up on github
      - add REPL capability
      - higgs-dev functionality - run make targets, etc
      - addons for js-mode and js2-mode to get correct syntax coloring, autocomplete, etc behavior for
        Higgs globals (such as require()) and IR function names, etc.


---------------------------------------------------------------------------------------------------

[DONE]: test harness
      - simple harness for running tests similar to what mozilla uses in their JIT tests


[DONE]: start FFI

The eventual goal is to give users of Higgs easy access to various APIs.
We will probably want to provide access to standard C APIs such as
malloc/free as well as the C file APIs. May also want to provide BSD-type
sockets, OpenGL, keyboard/mouse input, audio output. We could possibly
try to recruit some help (e.g.: on reddit) to implement some of these APIs
once our FFI system is in a more mature state.

Other layers of abstraction can be built to simplify the user experience 
further. For example, I would really like to have a drawing/canvas API that
allows the user to plot pixels using only a few simple commands, such as:

// Loads the canvas library
load('libs/canvas.js'); 

// Creates a window, title is optional
w = new CanvasWindow(512, 512);

// Draws a red pixel
w.setPixel(100, 200, {r:255, g:0, b:0});

Such a canvas API could be built on top of the OpenGL library API. In the
example above, the regular JS load command is used to load our library. The
same could be done for OpenGL or file acess:

// Loads a wrapper for the C stdio API
load('libs/stdio.js');

f = fopen('foobar', 'r');
...

Some libraries may not be usable on all systems. For example, audio APIs, or
even OpenGL (may not be installed). If the wrappers fail to load, an exception
should be thrown. This exception can be caught by the user code.

I'm proposing we create a higgs/source/libs directory to store JS files
implementing various libraries/bindings we want to provide to users. Some of
these libraries can be handwritten (e.g.: canvas), others like OpenGL could
eventually be auto-generated by a C header parsing tool, but we could also
write the initial JS bindings by hand based on our low-level C FFI or wrappers
around the low-level C FFI.

To make all this practical, I think we should probably get rid of the
BIN_DIR makefile option and instead implement a "make install" build target.
This would compile Higgs and copy the binary under /usr/bin/higgs, and copy the
higgs/source/stdlib and higgs/source/libs directories under /etc/higgs.
When executing the load() command, higgs would first look in the current
directory by default, and then under /etc/higgs if the path is relative. This
would ensure that our libraries remain usable no matter the current directory.
